<?php
/**
 * @file
 * Code for the tmi_application feature.
 */

include_once 'tmi_application.features.inc';

/**
 * Implements hook_entity_info().
 */
function tmi_application_entity_info() {
  $info = array();
  $info['application'] = array(
    'label' => t('Application'),
    'base table' => 'tmi_application',
    'entity keys' => array(
      'id' => 'aid',
      'label' => 'aid',
    ),
    'entity class' => 'ApplicationEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'ApplicationEntityController',
    'module' => 'tmi_application',
  );
  return $info;
}

/**
 * Implements hook_menu().
 */
function tmi_application_menu() {
  $items['application'] = array(
    'page callback' => 'tmi_application_page',
    'access arguments' => array('access content'),
  );
  $items['application/%application'] = array(
    'title' => 'Application',
    'page callback' => 'tmi_application_view_application_page',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('review applications'),
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function tmi_application_permission() {
  return array(
    'review applications' => array(
      'title' => t('Review applications'),
      'description' => t('View and review any Scholarship Application.'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tmi_application_theme($existing, $type, $theme, $path) {
  return array(
    'application' => array(
      'template' => 'application',
      'path' => drupal_get_path('module', 'tmi_application') . '/theme',
    ),
    'application_status' => array(
      'template' => 'application-status',
      'path' => drupal_get_path('module', 'tmi_application') . '/theme',
    ),
  );
}

/**
 * Implements hook_admin_paths().
 */
function tmi_application_admin_paths() {
  $paths = array(
    'application/*' => TRUE,
    'node/*/applications' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_views_data().
 */
function tmi_application_views_data() {
  // Define dosomething_signup table.
  $data['tmi_application']['table']['group'] = t('Applications');
  $data['tmi_application']['table']['base'] = array(
    'field' => 'aid',
    'title' => t('Applications'),
    'help' => t('Applications table.'),
    'weight' => -10,
  );
  $data['tmi_application']['table']['join'] = array(
    'node' => array(
      'left_field' => 'nid',
      'field' => 'nid',
    ),
    'users' => array(
      'left_field' => 'uid',
      'field' => 'uid',
    ),
  );

  $data['tmi_application']['aid'] = array(
    'title' => t('Application aid'),
    'help' => t('Application primary key.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'tmi_application',
      'handler' => 'views_handler_relationship',
      'label' => t('Application aid'),
    ),
  );
  $data['tmi_application']['nid_apply_for'] = array(
    'title' => t('Applying for Node nid'),
    'help' => t('The node the Applicant is applying for.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'node',
      'handler' => 'views_handler_relationship',
      'label' => t('Applying for'),
    ),
  );
  $data['tmi_application']['uid'] = array(
    'title' => t('Uid'),
    'help' => t('Applicant User uid.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'users',
      'handler' => 'views_handler_relationship',
      'label' => t('Applicant User'),
    ),
  );
  $data['tmi_application']['created'] = array(
    'title' => t('Date created'),
    'help' => t('Date the application was created.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );
  $data['tmi_application']['submitted'] = array(
    'title' => t('Date submitted'),
    'help' => t('Date the application was submitted.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );
  $data['tmi_application']['completed'] = array(
    'title' => t('Date completed'),
    'help' => t('Date the application was completed.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );
  $data['tmi_application']['reviewed'] = array(
    'title' => t('Date reviewed'),
    'help' => t('Date the application was reviewed.'),
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );
  $data['tmi_application']['reviewer_rating'] = array(
    'title' => t('Rating'),
    'help' => t('Rating'),
    'field' => array(
      'handler' => 'views_handler_field',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_string',
    ),
    'argument' => array(
      'handler' => 'views_handler_argument_string',
    ),
  );
  $data['tmi_application']['reviewer_uid'] = array(
    'title' => t('Reviewer uid'),
    'help' => t('Reviewer User uid.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
    'relationship' => array(
      'base' => 'users',
      'handler' => 'views_handler_relationship',
      'label' => t('Reviewer User'),
    ),
  );
  return $data;
}

/**
 * Menu autoloader for %application.
 */
function application_load($aid) {
  return entity_load_single('application', $aid);
}

/**
 * Retrieve the Application aid for the current user.
 */
function tmi_application_get_application_aid($uid = NULL) {
  if (!$uid) {
    global $user;
    $uid = $user->uid;
  } 
  return db_select("tmi_application", "a")
    ->fields("a", array("aid"))
    ->condition("uid", $uid)
    ->execute()
    ->fetchField();
}

/**
 * Page callback for Application form / status page.
 */
function tmi_application_page() {
  if (!user_is_logged_in()) {
    return t("Please login.");
  }
  // If this user is a reviewer, redirect to the admin view.
  if (user_access('review applications')) {
    $output = '<h2>' . t("Hi there, Reviewer!") . '</h2>';
    $output .= '<p>' . t("You have !link assigned to you for review.", array(
      '!link' => l('3 applications', 'node/' . TMI_SCHOLARSHIP_NID . '/applications'),
    )) . '</p>';
    return $output;
  }

  $aid = tmi_application_get_application_aid();
  $application = application_load($aid);

  // Load the Application Form node.
  $node = node_load($application->nid_application_form);
  // And its webform.
  webform_node_view($node, 'full');
  $content = isset($node->content['webform']) ? $node->content['webform'] : array();
  // If a webform exists:
  if ($output = theme_webform_view($node->content)) {
    // Return it.
    return $output;
  }

  // If we've made it this far, the webform has been submitted.
  return tmi_application_status_page($application);

}

/**
 * Returns HTML for the Application status page.
 */
function tmi_application_status_page($application) {
  $aid = $application->aid;
  return theme('application_status', array(
    'application' => $application,
    'recommendations' => tmi_recommendation_get_recommendations_table($aid),
    'request_form' => drupal_get_form('tmi_recommendation_request_form', $aid),
  ));
}

/**
 * Page callback for the Application Review page.
 */
function tmi_application_view_application_page($application) {
  return $application->view();
}

/**
 * Form constructor for a Application review.
 *
 * @param object $application
 *   The Application entity.
 */
function tmi_application_review_form($form, &$form_state, $application) {
  $form['aid'] = array(
    '#type' => 'hidden',
    '#default_value' => $application->aid,
    '#access' => FALSE,
  );
  $form['reviewer_rating'] = array(
    '#type' => 'select',
    '#required' => TRUE,
    '#title' => t("Rating"),
    '#options' => tmi_application_get_review_rating_options(),
    '#default_value' => $application->reviewer_rating,
  );
  $form['reviewer_notes'] = array(
    '#type' => 'textarea',
    '#title' => t("Notes"),
    '#default_value' => $application->reviewer_notes,
  );
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t("Save Rating"),
    ),
  );
  return $form;
}

/**
 * Submit callback for tmi_application_review_form().
 */
function tmi_application_review_form_submit($form, &$form_state) {
  // If user session no longer exists:
  if (!user_is_logged_in()) {
    // Tell them that.
    drupal_set_message(t("You are no longer logged in. Please log in."), 'error');
  }
  $values = $form_state['values'];
  $application = application_load($values['aid']);
  $application->reviewed($values);
  drupal_set_message(t("Review saved."));
}

/**
 * Options callback for Review Form.
 */
function tmi_application_get_review_rating_options() {
  return array(
    'yes' => t("Yes"),
    'no' => t("No"),
    'maybe' => t("Maybe"),
  );
}
