<?php
/**
 * @file
 * Code for the tmi_recommendation module.
 */

/**
 * Implements hook_entity_info().
 */
function tmi_recommendation_entity_info() {
  $info = array();
  $info['recommendation'] = array(
    'label' => t('Recommendation'),
    'base table' => 'tmi_recommendation',
    'entity keys' => array(
      'id' => 'rid',
      'label' => 'email',
    ),
    'entity class' => 'RecommendationEntity',
    'uri callback' => 'entity_class_uri',
    'controller class' => 'RecommendationEntityController',
    'module' => 'tmi_recommendation',
  );
  return $info;
}

/**
 * Implements hook_theme().
 */
function tmi_recommendation_theme($existing, $type, $theme, $path) {
  return array(
    'recommendation' => array(
      'template' => 'recommendation',
      'path' => drupal_get_path('module', 'tmi_recommendation') . '/theme',
    ),
  );
}

/**
 * Return all Recommendations for a given Application $aid.
 *
 * @param int $aid
 *   The Application aid.
 *
 * @return array
 */
function tmi_recommendation_get_recommendations($aid) {
  return db_select("tmi_recommendation", "r")
    ->fields("r")
    ->condition("aid", $aid)
    ->execute()
    ->fetchAll();
}

/**
 * For a given Recommendation $rid, get its Recommend Form URL.
 *
 * @param int $rid
 *   The Recommendation $rid.
 *
 * @return string
 */
function tmi_recommendation_get_recommend_form_url($rid) {
  return 'node/' . TMI_RECOMMEND_FORM_NID . '?rid=' . $rid;
}

/**
 * Form constructor for a Recommendation request.
 *
 * @param int $aid
 *   The Application aid.
 */
function tmi_recommendation_request_form($form, &$form_state, $aid) {
  $form['aid'] = array(
    '#type' => 'hidden',
    '#default_value' => $aid,
    '#access' => FALSE,
  );
  $form['email'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t("Email"),
    '#description' => t("The Recommender's email."),
  );
  $form['first_name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t("First Name"),
    '#description' => t("The Recommender's first name."),
  );
  $form['last_name'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t("Last Name"),
    '#description' => t("The Recommender's last name."),
  );
  $form['actions'] = array(
    '#type' => 'actions',
    'submit' => array(
      '#type' => 'submit',
      '#value' => t("Send Request"),
    ),
  );
  return $form;
}

/**
 * Submit callback for tmi_recommendation_request_form().
 */
function tmi_recommendation_request_form_submit($form, &$form_state) {
  // If user session no longer exists:
  if (!user_is_logged_in()) {
    // Tell them that.
    drupal_set_message(t("You are no longer logged in. Please log in."), 'error');
  }
  $values = $form_state['values'];
  $recommendation = entity_create('recommendation', array(
    'aid' => $values['aid'],
    'email' => $values['email'],
    'first_name' => $values['first_name'],
    'last_name' => $values['last_name'],
    // Hardcode as required for now.
    'required' => 1,
  ));
  $recommendation->save();
  drupal_set_message(t("Recommendation request sent to %email.", array(
    '%email' => $values['email'],
  )));
}

/**
 * Returns a table of recommendations for given Application $aid.
 *
 * @return
 *   The table HTML, or FALSE if no recommendations. 
 */
function tmi_recommendation_get_recommendations_table($aid, $admin = FALSE) {
  $recommendations = tmi_recommendation_get_recommendations($aid);
  if (empty($recommendations)) {
    return FALSE;
  }
  $header = array(
    t('Name'),
    t('Email'),
    t('Requested'),
    t('Submitted'),
  );
  if ($admin) {
    $header[] = t('Form');
  }
  $rows = array();
  foreach ($recommendations as $delta => $rec) {
    $rows[$delta] = array(
      $rec->first_name . ' ' . $rec->last_name,
      $rec->email,
      format_date($rec->created, 'short'),
      $rec->submitted ? format_date($rec->submitted, 'short') : '',
    );
    if ($admin) {
      $form_url = tmi_recommendation_get_recommend_form_url($rec->rid);
      $rows[$delta][] = '<a href="/' . $form_url . '">url</a>';
    }
  }
  return theme('table', array('header' => $header, 'rows' => $rows));
}
